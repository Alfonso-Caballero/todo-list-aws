pipeline {
    agent any

    options {
        skipDefaultCheckout() // Default repository cloning fails, causing pipeline failure
    }
    
    environment {
        GIT_BRANCH = 'develop'
        GIT_TOKEN = credentials('token')
        MASTER_BRANCH = 'main'
    }

    stages {
        stage('Get Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Alfonso-Caballero/todo-list-aws.git'
                bat 'whoami'
                bat 'hostname'
                echo "${WORKSPACE}"
                stash name: 'code', includes : '**'
                
            }
            post {
                    always {
                        deleteDir()
                        }
                    }   
                }
        stage('Deploy') {
            agent {
                label 'ec2'
            }
            steps {
                unstash 'code'
                sh 'whoami'
                sh 'hostname'
                echo "${WORKSPACE}"
                sh "aws cloudformation delete-stack --stack-name my-production-stack"
                echo "Waiting for stack deletion..."
                sh "aws cloudformation wait stack-delete-complete --stack-name my-production-stack"
                sh 'sam build'
                sh 'sam validate --region us-east-1'
                script{
                    def deployOutput = sh(
                                script: '''
                                    sam deploy \
                                    --template-file .aws-sam/build/template.yaml \
                                    --stack-name my-production-stack \
                                    --capabilities CAPABILITY_IAM \
                                    --no-confirm-changeset \
                                    --region us-east-1 \
                                    --s3-bucket bucketnugget2 \
                                    --parameter-overrides \
                                        Stage=production \
                                        Environment=production \
                                        ParameterKey1=Value1 \
                                        ParameterKey2=Value2 \
                                    --force-upload
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            // Extraer la URL de salida (BaseUrlApi)
                            def baseUrlMatch = deployOutput =~ /Value\s+(.+)/
                            def baseUrl = baseUrlMatch[0][1].trim()
                            
                            echo "Deployed successfully. Base URL: ${baseUrl}"
                            
                            // Ejecutar las pruebas de integración con la URL capturada como parámetro
                           env.BASE_URL = baseUrl
                    }
            }
        }
        stage('Rest Test') {
                    agent {
                        label 'ec2'
                    }
                    steps {
                        script {
                            sh 'whoami'
                            sh 'hostname'
                            echo "${WORKSPACE}"
                            try {
                                sh "pytest -m read_only test/integration/todoApiTest.py"
                            } catch (Exception e) {
                                currentBuild.result = 'FAILURE'
                                error "Test execution failed: ${e.message}"
                            }
                        }
                    }
                    post {
                        always {
                            script {
                                if (currentBuild.result == 'FAILURE') {
                                    error "Pipeline failed. Check logs for details."
                                }      
                            }
                            deleteDir()
                        }
                    }
                }
        }
}
