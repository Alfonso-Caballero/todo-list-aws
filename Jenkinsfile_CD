pipeline {
    agent any

    options {
        skipDefaultCheckout() // Default repository cloning fails, causing pipeline failure
    }

    stages {
        stage('Get Code') {
            steps {
                git branch: 'main', url: 'https://github.com/Alfonso-Caballero/todo-list-aws.git'
                bat 'whoami'
                bat 'hostname'
                echo "${WORKSPACE}"
                stash name: 'code', includes : '**'
                
            }
            post {
                always {
                        deleteDir()
                        }
                    } 
        }
        stage('Deploy') {
            agent {
                label 'ec2'
            }
            steps {
                unstash 'code'
                sh 'whoami'
                sh 'hostname'
                echo "${WORKSPACE}"
                sh 'sam build'
                sh 'sam validate --region us-east-1'
                script{
                    def deployOutput = sh(
                                script: '''
                                    sam deploy \
                                    --template-file .aws-sam/build/template.yaml \
                                    --stack-name my-production-stack \
                                    --capabilities CAPABILITY_IAM \
                                    --no-confirm-changeset \
                                    --region us-east-1 \
                                    --s3-bucket bucketnugget \
                                    --parameter-overrides \
                                        Stage=production \
                                        Environment=production \
                                        ParameterKey1=Value1 \
                                        ParameterKey2=Value2 \
                                    --force-upload
                                ''',
                                returnStdout: true
                            ).trim()
                            
                            // Extraer la URL de salida (BaseUrlApi)
                            def baseUrlMatch = deployOutput =~ /Value\s+(.+)/
                            def baseUrl = baseUrlMatch[0][1].trim()
                            
                            echo "Deployed successfully. Base URL: ${baseUrl}"
                            
                            // Ejecutar las pruebas de integración con la URL capturada como parámetro
                           env.BASE_URL = baseUrl
                    }
            }
        }
        stage('Rest Test') {
            agent {
                label 'ec2'
            }
            steps {
                script {
            sh 'whoami'
            sh 'hostname'
            echo "${WORKSPACE}"
            try {
                // Crear un script Python para contar las pruebas con la marca 'read_only'
                def scriptContent = """
                import pytest

                def count_read_only_tests():
                    test_files = ['test/integration/todoApiTest.py']
                    read_only_tests = 0
                    for file in test_files:
                        items = pytest.main(['--collect-only', '-q', file])
                        for item in items:
                            if 'read_only' in item.keywords:
                                read_only_tests += 1
                    print(read_only_tests)

                if __name__ == '__main__':
                    count_read_only_tests()
                """
                writeFile file: 'count_read_only_tests.py', text: scriptContent

                // Ejecutar el script Python y capturar el resultado
                def readOnlyTestCount = sh(script: "python3 count_read_only_tests.py", returnStdout: true).trim()
                echo "Number of read-only tests: ${readOnlyTestCount}"

                if (readOnlyTestCount != "0") {
                    sh "pytest -m read_only test/integration/todoApiTest.py || true"
                } else {
                    echo "No read-only tests found. Skipping pytest execution."
                }
            } catch (Exception e) {
                currentBuild.result = 'FAILURE'
                error "Test execution failed: ${e.message}"
            }
        }
            }
            post {
                always {
                    script {
                        if (currentBuild.result == 'FAILURE') {
                            error "Pipeline failed. Check logs for details."
                        }      
                    }
                    deleteDir()
                }
            }
        }
        }
}
